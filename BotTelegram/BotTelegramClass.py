import asyncio
import sys
import platform
import os
import random
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import subprocess

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(TOKEN)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—ã–±–æ—Ä—ã –¥–ª—è –∏–≥—Ä—ã
choices = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—É—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_jokes(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        jokes = file.readlines()
    return [joke.strip() for joke in jokes]  # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
current_directory = os.path.dirname(os.path.abspath(__file__))
# –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É 'jokes.txt'
file_path = os.path.join(current_directory, 'jokes.txt')

# –°–ø–∏—Å–æ–∫ –∞–π—Ç–∏—à–Ω—ã—Ö —à—É—Ç–æ–∫, —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
it_jokes = load_jokes(file_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
        [KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞"), KeyboardButton("üÉè –®—É—Ç–∫–∏")],
        [KeyboardButton("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Dota 2")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üëã –ü—Ä–∏–≤–µ—Ç":
        keyboard = [
            [InlineKeyboardButton("–í—Å–µ —Ö–æ—Ä–æ—à–æ", callback_data='good')],
            [InlineKeyboardButton("–ü–ª–æ—Ö–æ", callback_data='bad')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", reply_markup=reply_markup)
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

    elif text == "üéÆ –ò–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞":
        keyboard = [[KeyboardButton(choice) for choice in choices]]
        keyboard.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞:",
            reply_markup=reply_markup
        )

    elif text == "üÉè –®—É—Ç–∫–∏":
        joke = random.choice(it_jokes)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç
        await update.message.reply_text(joke)

    elif text in choices:
        user_choice = text
        bot_choice = random.choice(choices)

        if user_choice == bot_choice:
            result = "–ù–∏—á—å—è!"
        elif (user_choice == "–ö–∞–º–µ–Ω—å" and bot_choice == "–ù–æ–∂–Ω–∏—Ü—ã") or \
             (user_choice == "–ù–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–ë—É–º–∞–≥–∞") or \
             (user_choice == "–ë—É–º–∞–≥–∞" and bot_choice == "–ö–∞–º–µ–Ω—å"):
            result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ"
        else:
            result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üò¢"

        keyboard = [[KeyboardButton(choice) for choice in choices]]
        keyboard.append([KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n{result}",
            reply_markup=reply_markup
        )

    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        keyboard = [
            [KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞"), KeyboardButton("üÉè –®—É—Ç–∫–∏")],
            [KeyboardButton("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Dota 2")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {update.effective_user.first_name}!",
            reply_markup=reply_markup
        )

    elif text == "üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å Dota 2":
        try:
            # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ Steam –∏ ID –∏–≥—Ä—ã Dota 2
            subprocess.Popen(r'Z:\SteamLibrary\steamapps\common\dota 2 beta\game\bin\win64\dota2.exe')
            await update.message.reply_text("Dota 2 –∑–∞–ø—É—â–µ–Ω–∞! üéÆ")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Dota 2: {e}")

    else:
        await update.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—Å–µ —Ö–æ—Ä–æ—à–æ" –∏ "–ü–ª–æ—Ö–æ")
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–∫ (–∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)

    if query.data == 'good':
        await query.edit_message_text("–†–∞–¥–∞ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! üòä")
    elif query.data == 'bad':
        await query.edit_message_text("–û–π, –Ω–∞–¥–µ—é—Å—å, —Å–∫–æ—Ä–æ –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üòî")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def handle_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")

def run_bot():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows –∏ Python 3.8
    if platform.system() == 'Windows':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.AUDIO, handle_other))
    app.add_handler(CallbackQueryHandler(handle_callback))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try:
        run_bot()
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
